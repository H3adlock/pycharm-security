<idea-plugin>
    <id>org.tonybaloney.security.pycharm-security</id>
    <name>Python Security</name>
    <vendor email="anthonyshaw@apache.org" url="http://tonybaloney.github.io">Anthony Shaw</vendor>

    <description><![CDATA[
    Analyzes potential security flaws in your Python code and suggests fixes. Designed to find common security issues in Python code.<br>

    <h2>Package Scanner</h2>
    The Python-Security plugin will scan your installed Python packages against SafetyDB on startup or via a menu item. Any known security vulnerabilities are raised as warnings.

    <h2>Current checks and fixes</h2>
    <ul>
     <li>Timing Attack warnings and prevention with compare_digest</li>
     <li>Cryptographically weak algorithms for hashing</li>
     <li>Use of unsafe loading of YAML files</li>
     <li>Use of remote code execution when instantiating flask applications</li>
     <li>Use of MITM exposure when making HTTP requests with requests or httpx</li>
     <li>Bypassing of temporary file creation to inject content</li>
     <li>Insecure configuration of Django debug mode</li>
     <li>Insecure configuration of Flask debug mode</li>
    </ul>
    ]]></description>

    <!-- please see http://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/plugin_compatibility.html
         on how to target different products -->
    <depends>com.intellij.modules.python</depends>

    <extensions defaultExtensionNs="com.intellij">
        <backgroundPostStartupActivity implementation="security.packaging.PythonPackageVulnerabilityStartupTask"/>
        <localInspection language="Python" enabledByDefault="true" groupName="Python Security" hasStaticDescription="true" displayName="YML100: Use of unsafe yaml load" shortName="PyyamlLoadInspection" implementationClass="security.validators.PyyamlLoadInspection" />
        <localInspection language="Python" enabledByDefault="true" groupName="Python Security" hasStaticDescription="true" displayName="DJG100: Use of Django debug mode" shortName="DjangoDebugModeSettingsInspection" implementationClass="security.validators.DjangoDebugModeSettingsInspection" />
        <localInspection language="Python" enabledByDefault="true" groupName="Python Security" hasStaticDescription="true" displayName="DJG200, DJG201: Missing Django Middleware" shortName="DjangoMiddlewareInspection" implementationClass="security.validators.DjangoMiddlewareInspection" />
        <localInspection language="Python" enabledByDefault="true" groupName="Python Security" hasStaticDescription="true" displayName="FLK100: Use of Flask debug mode" shortName="FlaskDebugModeInspection" implementationClass="security.validators.FlaskDebugModeInspection" />
        <localInspection language="Python" enabledByDefault="true" groupName="Python Security" hasStaticDescription="true" displayName="RQ101: Setting verify=False when using httpx" shortName="HttpxNoVerifyInspection" implementationClass="security.validators.HttpxNoVerifyInspection" />
        <localInspection language="Python" enabledByDefault="true" groupName="Python Security" hasStaticDescription="true" displayName="RQ100: Setting verify=False when using requests" shortName="RequestsNoVerifyInspection" implementationClass="security.validators.RequestsNoVerifyInspection" />
        <localInspection language="Python" enabledByDefault="true" groupName="Python Security" hasStaticDescription="true" displayName="PR100: Running subprocesses with shell mode" shortName="SubprocessShellModeInspection" implementationClass="security.validators.SubprocessShellModeInspection" />
        <localInspection language="Python" enabledByDefault="true" groupName="Python Security" hasStaticDescription="true" displayName="TMP100: Use of unsafe tempfile.mktemp" shortName="TempfileMktempInspection" implementationClass="security.validators.TempfileMktempInspection" />
        <localInspection language="Python" enabledByDefault="true" groupName="Python Security" hasStaticDescription="true" displayName="HL100, HL101: Insecure hashing algorithms" shortName="InsecureHashInspection" implementationClass="security.validators.InsecureHashInspection" />
        <localInspection language="Python" enabledByDefault="true" groupName="Python Security" hasStaticDescription="true" displayName="PW100: Comparing secrets and passwords insecurely" shortName="TimingAttackInspection" implementationClass="security.validators.TimingAttackInspection" />
        <localInspection language="Python" enabledByDefault="true" groupName="Python Security" hasStaticDescription="true" displayName="JJ100: Use of unsanitized Jinja2 Templates" shortName="JinjaAutoinspectInspection" implementationClass="security.validators.JinjaAutoinspectInspection" />
        <localInspection language="Python" enabledByDefault="true" groupName="Python Security" hasStaticDescription="true" displayName="PW101: Hardcoded passwords and secrets" shortName="HardcodedPasswordInspection" implementationClass="security.validators.HardcodedPasswordInspection" />
        <localInspection language="Python" enabledByDefault="true" groupName="Python Security" hasStaticDescription="true" displayName="EX100: Use of builtin exec() function" shortName="BuiltinExecInspection" implementationClass="security.validators.BuiltinExecInspection" />
        <localInspection language="Python" enabledByDefault="true" groupName="Python Security" hasStaticDescription="true" displayName="MK100: Use of unsanitized Mako Templates" shortName="MakoTemplateInspection" implementationClass="security.validators.MakoTemplateInspection" />
    </extensions>
    <extensions defaultExtensionNs="Pythonid">
    </extensions>
    <actions>
        <action id="Security.CheckSafetyDB" class="security.packaging.SafetyDbCheckerAction" text="Check Python Package Security" description="Check the installed Python packages for any known vulnerabilities." >
            <add-to-group group-id="ToolsMenu" anchor="last"/>
            <add-to-group group-id="PyPackagingMenu" anchor="last"/>
        </action>
    </actions>
</idea-plugin>